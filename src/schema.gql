# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type BookmarkEntity {
  createdAt: DateTime!
  id: Float!
  mediaId: Int!
  mediaType: Media!
  posterPath: String!
  releaseDate: String!
  title: String!
  updatedAt: DateTime!
  userId: Int!
  vote: Float!
}

type CommentWithUser {
  comment: String!
  createdAt: DateTime!
  id: Float!
  postId: Int!
  updatedAt: DateTime!
  user: UserEntity!
  userId: Int!
}

type CountForPost {
  comments: Int!
  likes: Int!
}

input CraeteAccountInput {
  email: String!
  password: String!
  username: String!
}

type CreateAccountOutput {
  error: String
  ok: Boolean!
}

input CreateBookmarkInput {
  mediaId: Int!
  mediaType: Media!
  posterPath: String!
  releaseDate: String!
  title: String!
  vote: Float!
}

type CreateBookmarkOutput {
  error: String
  ok: Boolean!
}

input CreateCommentInput {
  comment: String!
  postId: Int!
}

type CreateCommentOutput {
  error: String
  ok: Boolean!
}

input CreatePostInput {
  mediaId: Int!
  mediaTitle: String!
  mediaType: Media!
  posterPath: String!
  text: String!
  vote: Float!
}

type CreatePostOutput {
  error: String
  ok: Boolean!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DeleteBookmarkInput {
  bookmarkId: Int!
}

type DeleteBookmarkOutput {
  error: String
  ok: Boolean!
}

input DeleteCommentInput {
  commentId: Int!
}

type DeleteCommentOutput {
  error: String
  ok: Boolean!
}

input DeletePostInput {
  postId: Int!
}

type DeletePostOutput {
  error: String
  ok: Boolean!
}

input EditProfileInput {
  avatar: String
  username: String
}

type EditProfileOutput {
  error: String
  ok: Boolean!
}

input IsLikePostInput {
  postId: Int!
}

type IsLikePostOutput {
  error: String
  isLike: Boolean!
  ok: Boolean!
}

input IsMeBookmarkInput {
  mediaId: Int!
}

type IsMeBookmarkOutput {
  error: String
  isBookmarked: Boolean!
  ok: Boolean!
}

type LastBookmarkOutput {
  bookmark: BookmarkEntity
  error: String
  ok: Boolean!
}

input LikeToggleInput {
  postId: Int!
}

type LikeToggleOutput {
  error: String
  ok: Boolean!
}

input LoginInput {
  email: String!
  password: String!
}

type LoginOutput {
  error: String
  ok: Boolean!
  token: String
}

type MeOutput {
  user: UserEntity
}

"""Media Type"""
enum Media {
  """Movie Type"""
  movie

  """TV Shows Type"""
  tv
}

type Mutation {
  """Create Account"""
  createAccount(input: CraeteAccountInput!): CreateAccountOutput!
  createBookmark(input: CreateBookmarkInput!): CreateBookmarkOutput!
  createComment(input: CreateCommentInput!): CreateCommentOutput!
  createPost(input: CreatePostInput!): CreatePostOutput!
  deleteBookmark(input: DeleteBookmarkInput!): DeleteBookmarkOutput!
  deleteCommet(input: DeleteCommentInput!): DeleteCommentOutput!
  deletePost(input: DeletePostInput!): DeletePostOutput!

  """Edit Profile"""
  editProfile(input: EditProfileInput!): EditProfileOutput!
  likeToggle(input: LikeToggleInput!): LikeToggleOutput!

  """Login"""
  login(input: LoginInput!): LoginOutput!
}

type PostDetailEntity {
  _count: CountForPost!
  comments: [CommentWithUser!]!
  createdAt: DateTime!
  id: Float!
  mediaId: Int!
  mediaTitle: String!
  mediaType: Media!
  posterPath: String!
  text: String!
  updatedAt: DateTime!
  user: UserEntity!
  userId: Int!
  vote: Float!
}

type PostWithCount {
  _count: CountForPost!
  createdAt: DateTime!
  id: Float!
  mediaId: Int!
  mediaTitle: String!
  mediaType: Media!
  posterPath: String!
  text: String!
  updatedAt: DateTime!
  user: UserEntity!
  userId: Int!
  vote: Float!
}

type Query {
  isLikePost(input: IsLikePostInput!): IsLikePostOutput!
  isMeBookmark(input: IsMeBookmarkInput!): IsMeBookmarkOutput!
  lastBookmark: LastBookmarkOutput!
  me: MeOutput!
  readBookmarks: ReadBookmarksOutput!
  readPostDetail(input: ReadPostDetailInput!): ReadPostDetailOutput!
  readPosts(input: ReadPostsInput!): ReadPostsOutput!
}

type ReadBookmarksOutput {
  bookmarks: [BookmarkEntity!]
  error: String
  ok: Boolean!
}

input ReadPostDetailInput {
  postId: Int!
}

type ReadPostDetailOutput {
  error: String
  ok: Boolean!
  post: PostDetailEntity
}

input ReadPostsInput {
  skip: Float!
  take: Float!
}

type ReadPostsOutput {
  error: String
  ok: Boolean!
  posts: [PostWithCount!]
  totalCount: Int
  totalPage: Int
}

"""User role client or admin"""
enum Role {
  """Admin for me"""
  ADMIN

  """User for client"""
  USER
}

type UserEntity {
  avatar: String
  count: Int!
  createdAt: DateTime!
  email: String!
  id: Float!
  password: String!
  role: Role!
  updatedAt: DateTime!
  username: String!
}